<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>$ kill -1</title><link href="http://lostsummer.github.io/" rel="alternate"></link><link href="http://lostsummer.github.io/feeds/all.atom.xml" rel="self"></link><id>http://lostsummer.github.io/</id><updated>2018-04-11T18:15:14+08:00</updated><entry><title>容器平台监控方案大体设计</title><link href="http://lostsummer.github.io/posts/2018/Apr/11/%E5%AE%B9%E5%99%A8%E5%B9%B3%E5%8F%B0%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88%E5%A4%A7%E4%BD%93%E8%AE%BE%E8%AE%A1.html" rel="alternate"></link><published>2018-04-11T18:15:14+08:00</published><updated>2018-04-11T18:15:14+08:00</updated><author><name>lostsummer</name></author><id>tag:lostsummer.github.io,2018-04-11:/posts/2018/Apr/11/容器平台监控方案大体设计.html</id><summary type="html"></summary><content type="html">&lt;h2 id="_1"&gt;&lt;a class="toclink" href="#_1"&gt;监控对象&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;容器集群节点 &lt;/li&gt;
&lt;li&gt;集群上运行的容器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;&lt;a class="toclink" href="#_2"&gt;监控数据类型&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;性能状态图表:&amp;nbsp;各性能指标的不间断连续数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务心跳:&amp;nbsp;定时上报，确认服务活性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;报警:&amp;nbsp;由状态数据经过报警逻辑计算触发（阈值，断流等）的报警信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;&lt;a class="toclink" href="#_3"&gt;不同类型数据流向&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;状态:
    集群节点采集器 -&amp;gt; Prometheus -&amp;gt;&amp;nbsp;Grafana&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;心跳:
    被监控容器自身 -&amp;gt; oneAgent -&amp;gt; InfluxDB -&amp;gt;&amp;nbsp;Grafana&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;报警:
    集群节点采集器 -&amp;gt; Prometheus -&amp;gt; AlertManager -&amp;gt; oneAgent -&amp;gt;&amp;nbsp;报警终端&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群节点采集器包括cAdvisor， node-exporter&amp;nbsp;等容器&lt;/li&gt;
&lt;li&gt;心跳需要特殊编写脚本，对于容器，要在Dockerfile编写时加入，并在启动时启用heartbeat相关参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;&lt;a class="toclink" href="#_4"&gt;架构及部署变化&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;目前测试运行的 Docker Swarm&amp;nbsp;栈将要发生变化，首要目的是处于节约容器集群资源考虑，将Prometheus剥离出集群单独部署。&lt;/p&gt;
&lt;p&gt;&lt;img alt="architecture_changing" src="http://ooyi4zkat.bkt.clouddn.com/容器监控信息采集.png"/&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;a class="toclink" href="#_5"&gt;设计任务&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;关键指标的提前整理归类等&lt;/p&gt;
&lt;h2 id="_6"&gt;&lt;a class="toclink" href="#_6"&gt;部署任务&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;解决Prometheus和AlterManager剥离出集群后的服务发现问题（或通过配置中静态配置采集器地址）&lt;/li&gt;
&lt;li&gt;数据采集效率和延迟测试&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_7"&gt;&lt;a class="toclink" href="#_7"&gt;开发任务&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;容器节点和容器的心跳上报脚本，心跳功能考虑纳入今后容器构建发布的规范。&lt;/li&gt;
&lt;li&gt;AlterManager&amp;nbsp;报错脚本编写。需要了解学习Prometheus技术栈，提取报警通用逻辑，避免随着服务变动频繁增添脚本。&lt;/li&gt;
&lt;li&gt;oneAgent接口研究，修改（如有必需）&lt;/li&gt;
&lt;/ol&gt;</content><category term="Prometheus"></category><category term="Docker"></category></entry><entry><title>容器监控方案选型</title><link href="http://lostsummer.github.io/posts/2018/Apr/09/201804091040.html" rel="alternate"></link><published>2018-04-09T00:00:00+08:00</published><updated>2018-04-09T00:00:00+08:00</updated><author><name>lostsummer</name></author><id>tag:lostsummer.github.io,2018-04-09:/posts/2018/Apr/09/201804091040.html</id><summary type="html"></summary><content type="html">&lt;p&gt;根据一篇不错的文章: &amp;rdquo; &lt;a href="https://mp.weixin.qq.com/s?__biz=MzA5OTAyNzQ2OA==&amp;amp;mid=2649696965&amp;amp;idx=1&amp;amp;sn=acdbaf74f837d6e07d753bc4e3199206&amp;amp;chksm=889315a6bfe49cb04686cd6d7a19ec73fdc7ddec98387d4ba5e524616669ee13f2f5b277a673&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0225cAhRGuYUIQ4Qidt6eXFU#rd"&gt;容器领域的十大监控系统对比 &lt;/a&gt; &amp;rdquo;&amp;nbsp;列出的流行监控方案&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;方案&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;DOCKER&lt;/span&gt; &lt;span class="caps"&gt;STATS&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;原生命令行工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CADVISOR&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;通常作为信息采集组件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SCOUT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;PINGDOM&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;DATADOG&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SYSDIG&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;PROMETHEUS&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;数据收集、告警&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;HEAPSTER&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Kuberenets only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ELK&lt;/span&gt; &lt;span class="caps"&gt;STACK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;日志分析，监控的一环&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SENSU&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;没有容器化，部署麻烦，免费版功能不强&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;更加确定了我们目前试用的以Prometheus为核心的方案。筛选的过程很简单，撇除掉商业付费的方案，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker stats&amp;nbsp;只是一个命令行接口，称不上方案，可能会被其他采集工具调用&lt;/li&gt;
&lt;li&gt;CAdvisor&amp;nbsp;目前我们作为数据采集的重要组件&lt;/li&gt;
&lt;li&gt;Prometheus&amp;nbsp;目前监控方案的核心&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ELK&lt;/span&gt;&amp;nbsp;目前还没用起来，可作为Granfana数据源，分析日志触发面板上的预警&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前试用的方案来源于github上的一份参考 &lt;a href="https://github.com/bvis/docker-prometheus-swarm"&gt;bvis/docker-prometheus-swarm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从他的容器编排可以看到整体方案是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采集器&lt;/li&gt;
&lt;li&gt;CAdvisor&lt;/li&gt;
&lt;li&gt;Node exporter (promethues&amp;nbsp;组件一部分)&lt;/li&gt;
&lt;li&gt;docker exporter&amp;nbsp;(转发容器原生API信息)&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;Prometheus&lt;/li&gt;
&lt;li&gt;报警器&lt;/li&gt;
&lt;li&gt;to slack&amp;nbsp;(国内用不了)&lt;/li&gt;
&lt;li&gt;to logstash&amp;nbsp;（没用起来）&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ELK&lt;/span&gt;&amp;nbsp;（没用起来）&lt;/li&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;li&gt;logstash&lt;/li&gt;
&lt;li&gt;kibana&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后结合一个Granfana模板的呈现就是这里 &lt;a href="http://grafana.emoney.cn/dashboard/db/docker-swarm-and-container-overview?refresh=1m&amp;amp;orgId=2&amp;amp;var-node=All&amp;amp;var-instance=10.0.0.12:9100&amp;amp;var-instance=10.0.0.13:9100&amp;amp;var-instance=10.0.0.15:9100&amp;amp;var-instance=10.0.0.14:9100&amp;amp;var-stack_namespace=All&amp;amp;var-service_name=All&amp;amp;var-proxy=All&amp;amp;var-topk=20&amp;amp;var-interval=$__auto_interval"&gt;docker-swarm-and-container-overview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中顶部 Errors，Alert Fired， Alert&amp;nbsp;Resolved是要配置Elasticsearch数据源使用的，目前还没有。&lt;/p&gt;
&lt;p&gt;数据库曾经试过我们熟悉的InfluxDB，配合CAdvisor做数据采集使用，但是发现Prometheus的指标查询更有可定制性和弹性。使用InfluxDB时一旦容器变动，需要频繁手动调整Granfana中的查询语句。这样的问题在Prometheus中不是问题。只是Prometheus的查询语言PromQL比InfluxQL略复杂。&lt;/p&gt;
&lt;p&gt;文中很多部分提到 Rancher 通过插件等方式整合CAdvisor， Promethues  等组件。Rancher&amp;nbsp;是否适合Swarm集群，整合的方式是否好用，还需要研究Rancher后再看。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;update:&amp;nbsp;2018-04-10&lt;/p&gt;
&lt;p&gt;Rancher 的调研写在Wiki里：&lt;a href="http://wiki.lostsummer.love/Docker/rancher%E5%BA%94%E7%94%A8%E4%BA%8Eswarm%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E7%9A%84%E8%B0%83%E7%A0%94.html"&gt;Rancher应用于swarm集群管理的调研&lt;/a&gt;&lt;/p&gt;</content><category term="Docker"></category><category term="Prometheus"></category><category term="InfluxDB"></category></entry><entry><title>我在Linux环境创建私有Go项目环境的方法</title><link href="http://lostsummer.github.io/posts/2018/Mar/30/201803301025.html" rel="alternate"></link><published>2018-03-30T00:00:00+08:00</published><updated>2018-03-30T00:00:00+08:00</updated><author><name>lostsummer</name></author><id>tag:lostsummer.github.io,2018-03-30:/posts/2018/Mar/30/201803301025.html</id><summary type="html"></summary><content type="html">&lt;p&gt;初次开发构建Go项目的朋友可能对如果创建一个干净独立的项目环境有些疑惑，这里介绍一下个人经验。&lt;/p&gt;
&lt;h1 id="_1"&gt;&lt;a class="toclink" href="#_1"&gt;前提&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;你安装配置好了golang编译器&lt;/li&gt;
&lt;li&gt;你懂得配置GOPATH，了解GO开发环境的目录结构&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_2"&gt;&lt;a class="toclink" href="#_2"&gt;主要问题及解决手段概述&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;隔离的开发环境。通过覆盖GOPATH环境变量解决。&lt;/li&gt;
&lt;li&gt;三方依赖库的项目隔离。通过vendor机制。&lt;/li&gt;
&lt;li&gt;三方库版本依赖。通过govendor工具。&lt;/li&gt;
&lt;li&gt;golang.org/ 包不能直接go&amp;nbsp;get的问题。通过github镜像解决。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_3"&gt;&lt;a class="toclink" href="#_3"&gt;步骤&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_4"&gt;&lt;a class="toclink" href="#_4"&gt;工具安装&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;govendor&lt;/p&gt;
&lt;p&gt;具体使用方法见项目主页：https://github.com/kardianos/govendor&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;p&gt;go get -u&amp;nbsp;github.com/kardianos/govendor&lt;/p&gt;
&lt;p&gt;该命令会将govender安装在你默认配置的的\$&lt;span class="caps"&gt;GOPATH&lt;/span&gt;/bin目录下，通常你已经将这个目录配置到了环境变量PATH中。&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;a class="toclink" href="#_5"&gt;从一个实例开始&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;已有的所有项目地址：http://git.emoney.cn/monitor/monitorplat.git
代码包导入路径：MonitorPlat/oneagent, MonitorPlat/onedistribute, &amp;hellip;&amp;nbsp;(该项目由多个程序组成)&lt;/p&gt;
&lt;h3 id="_6"&gt;&lt;a class="toclink" href="#_6"&gt;创建目录结构&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p dev_projects/src/MonitorPlat
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_7"&gt;&lt;a class="toclink" href="#_7"&gt;迁出代码&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd dev_projects
git clone http://git.emoney.cn/monitor/monitorplat.git src/MonitorPlat
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_9"&gt;&lt;a class="toclink" href="#_8"&gt;环境隔离&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了和.bashrc中配置的\$GOPATH隔离，需要在dev_projects下运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$(pwd)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了使用方便，可以写两个脚本&lt;/p&gt;
&lt;p&gt;env_activate.sh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CURDIR=`pwd`
OLDGOPATH="$GOPATH"
export GOPATH="$CURDIR"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;env_deactivate.sh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$OLDGOPATH
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样你可以通过&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source env_activate.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source env_deactivate.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来切换&lt;/p&gt;
&lt;h3 id="vendor"&gt;&lt;a class="toclink" href="#vendor"&gt;vendor&amp;nbsp;初始化&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd src/MonitorPlat
govendor init
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="githubgolangorg"&gt;&lt;a class="toclink" href="#githubgolangorg"&gt;从github镜像获取golang.org依赖包&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先可以在Monitor目录下用命令看到项目所有依赖包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;govendor list

...
  m golang.org/x/net/context
  m golang.org/x/net/context/ctxhttp
  m golang.org/x/net/websocket
  m golang.org/x/text/cases
  m golang.org/x/text/encoding
  m golang.org/x/text/encoding/charmap
  m golang.org/x/text/encoding/internal
  m golang.org/x/text/encoding/internal/enctest
  m golang.org/x/text/encoding/internal/identifier
  m golang.org/x/text/encoding/simplifiedchinese
  m golang.org/x/text/encoding/unicode
  m golang.org/x/text/internal
  m golang.org/x/text/internal/gen
  m golang.org/x/text/internal/language
  m golang.org/x/text/internal/language/compact
  m golang.org/x/text/internal/tag
  m golang.org/x/text/internal/testtext
  m golang.org/x/text/internal/ucd
  m golang.org/x/text/internal/utf8internal
  m golang.org/x/text/language
  m golang.org/x/text/runes
  m golang.org/x/text/transform
  m golang.org/x/text/unicode/cldr
  m golang.org/x/text/unicode/norm
  m golang.org/x/text/unicode/rangetable
  m golang.org/x/text/width
  m github.com/devfeel/dottask
  m github.com/devfeel/dotweb
  m github.com/devfeel/dotweb/cache
  m github.com/devfeel/dotweb/cache/redis
  m github.com/devfeel/dotweb/cache/runtime
  m github.com/devfeel/dotweb/config
  m github.com/devfeel/dotweb/const
  m github.com/devfeel/dotweb/core
  m github.com/devfeel/dotweb/feature
  m github.com/devfeel/dotweb/framework/convert
  m github.com/devfeel/dotweb/framework/crypto
  m github.com/devfeel/dotweb/framework/crypto/uuid
  m github.com/devfeel/dotweb/framework/encodes/gob
  m github.com/devfeel/dotweb/framework/exception
  m github.com/devfeel/dotweb/framework/file
  m github.com/devfeel/dotweb/framework/json
  m github.com/devfeel/dotweb/framework/redis
  m github.com/devfeel/dotweb/framework/reflects
  m github.com/devfeel/dotweb/logger
  m github.com/devfeel/dotweb/servers
  m github.com/devfeel/dotweb/session
  m github.com/devfeel/dotweb/test
  m github.com/garyburd/redigo/internal
  m github.com/garyburd/redigo/redis
  m github.com/influxdata/influxdb/client/v2
  m github.com/influxdata/influxdb/models
  m github.com/influxdata/influxdb/pkg/escape
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中行首 m 标识的，是目前环境缺少的包。从 golang.org 的依赖主要是 x/net 和 x/text&amp;nbsp;两部分。&lt;/p&gt;
&lt;p&gt;vendor 目录中创建 golang.org/x&amp;nbsp;目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p vendor/golang.org/x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;项目子模块添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule add https://github.com/golang/net.git vendor/golang.org/x/net
git submodule add https://github.com/golang/text.git vendor/golang.org/x/text
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_10"&gt;&lt;a class="toclink" href="#_9"&gt;获取其他依赖包&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以简单的通过一个命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;govendor fetch +m
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="git"&gt;&lt;a class="toclink" href="#git"&gt;git&amp;nbsp;追踪&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add vendor/vendor.json
git commit ...
git push ...
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_11"&gt;&lt;a class="toclink" href="#_10"&gt;新位置使用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;git submodule 已经把vendor/golang.org 下的项目版本记住
其他的包，vendor.json&amp;nbsp;记录了版本。&lt;/p&gt;
&lt;p&gt;commit&amp;nbsp;并提交到远程库后，在新的位置迁出后&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$(pwd)
cd src/MonitorPlat
git submodule update
govender sync
&lt;/pre&gt;&lt;/div&gt;</content><category term="Go"></category><category term="Linux"></category></entry><entry><title>移动版行情服务器架构分析</title><link href="http://lostsummer.github.io/posts/2017/Apr/11/%E7%A7%BB%E5%8A%A8%E7%89%88%E8%A1%8C%E6%83%85%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90.html" rel="alternate"></link><published>2017-04-11T18:30:54+08:00</published><updated>2017-04-11T18:30:54+08:00</updated><author><name>lostsummer</name></author><id>tag:lostsummer.github.io,2017-04-11:/posts/2017/Apr/11/移动版行情服务器架构分析.html</id><summary type="html"></summary><content type="html">&lt;h1 id="_1"&gt;&lt;a class="toclink" href="#_1"&gt;当前移动版架构&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;仅展示移动版行情功能涉及的上下游结构，不涉及交易模块&lt;/p&gt;
&lt;p&gt;Front&amp;nbsp;上游是上证或券商提供的行情数据接口，部分外盘数据可能来自新浪公开的接口&lt;/p&gt;
&lt;p&gt;FSServer 部署在公司，Memcache&amp;nbsp;由公司服务定时远程写入数据&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://ooyi4zkat.bkt.clouddn.com/%E8%A1%8C%E6%83%85%E6%9E%B6%E6%9E%84.png"/&gt;&lt;/p&gt;
&lt;h1 id="_2"&gt;&lt;a class="toclink" href="#_2"&gt;主要业务流程&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_3"&gt;&lt;a class="toclink" href="#_3"&gt;用户登录流程&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用户登录区分匿名/实名，首次/非首次&lt;/p&gt;
&lt;p&gt;Fee 验证通过后，&lt;span class="caps"&gt;LB&lt;/span&gt; 返回一个相对空闲的 &lt;span class="caps"&gt;DS&lt;/span&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; （实际就是 &lt;span class="caps"&gt;IP&lt;/span&gt;：&lt;span class="caps"&gt;PORT&lt;/span&gt;&amp;nbsp;拼合）返回给客户端&lt;/p&gt;
&lt;p&gt;所有 &lt;span class="caps"&gt;DS&lt;/span&gt; 的&amp;nbsp;服务端口要暴露在公网中&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://ooyi4zkat.bkt.clouddn.com/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%97%B6%E5%BA%8F%E5%9B%BE.png"/&gt;&lt;/p&gt;
&lt;h2 id="_4"&gt;&lt;a class="toclink" href="#_4"&gt;用户信息查询修改流程&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;DS&lt;/span&gt; 转发客户请求给&amp;nbsp;Fee&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://ooyi4zkat.bkt.clouddn.com/%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%E4%BF%AE%E6%94%B9.png"/&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;a class="toclink" href="#_5"&gt;用户行情数据获取&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://ooyi4zkat.bkt.clouddn.com/%E7%94%A8%E6%88%B7%E8%A1%8C%E6%83%85%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82.png"/&gt;&lt;/p&gt;
&lt;h1 id="_7"&gt;&lt;a class="toclink" href="#_6"&gt;缺陷分析&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_8"&gt;&lt;a class="toclink" href="#_7"&gt;共同缺陷&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;功能定义混子不明确&lt;/li&gt;
&lt;li&gt;稳定性差&lt;/li&gt;
&lt;li&gt;接口复杂不明晰且文档缺位&lt;/li&gt;
&lt;li&gt;缺少热备，自动恢复方案&lt;/li&gt;
&lt;li&gt;Debug困难&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_9"&gt;&lt;a class="toclink" href="#_8"&gt;各部分缺陷&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;数据上游 Front&amp;nbsp;没有好的高可用方案&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DM&lt;/span&gt; &lt;span class="caps"&gt;DS&lt;/span&gt; 冗余&lt;ul&gt;
&lt;li&gt;重复的数据下发，驻存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DM&lt;/span&gt; &lt;span class="caps"&gt;DS&lt;/span&gt; 职责不明 (明确的设计是区分计算节点和分发节点)&lt;ul&gt;
&lt;li&gt;有些指标 &lt;span class="caps"&gt;DS&lt;/span&gt;&amp;nbsp;也承担计算任务&lt;/li&gt;
&lt;li&gt;操盘线 &lt;span class="caps"&gt;DS&lt;/span&gt; 引入&amp;nbsp;CalcCPX.o&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;LB&lt;/span&gt; &lt;span class="caps"&gt;DS&lt;/span&gt; 分工不明 （缺少 &lt;span class="caps"&gt;API&lt;/span&gt; 网关）&lt;ul&gt;
&lt;li&gt;用户登录由 &lt;span class="caps"&gt;LB&lt;/span&gt; 转发到&amp;nbsp;Fee&lt;/li&gt;
&lt;li&gt;用户改密等由 &lt;span class="caps"&gt;DS&lt;/span&gt; 转发到&amp;nbsp;Fee&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DM&lt;/span&gt; &lt;span class="caps"&gt;DS&lt;/span&gt; 存储不健壮&lt;ul&gt;
&lt;li&gt;本地文件数据库&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;IO&lt;/span&gt;&amp;nbsp;其实更频繁，内存态占用也大&lt;/li&gt;
&lt;li&gt;Debug&amp;nbsp;不容易&lt;/li&gt;
&lt;li&gt;存储结构更改麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存落地文件&lt;ul&gt;
&lt;li&gt;定时任务强杀时容易损坏，出错时需手动删除重启&lt;/li&gt;
&lt;li&gt;Debug&amp;nbsp;不容易&lt;/li&gt;
&lt;li&gt;存储结构更改麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DM&lt;/span&gt; &lt;span class="caps"&gt;DS&lt;/span&gt; 数据存储布局不合理 &lt;ul&gt;
&lt;li&gt;瀑布分流的结构，上游一个节点出错，下游10处需要手动修改&lt;/li&gt;
&lt;li&gt;应该有中心化，热备方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DS&lt;/span&gt; 接口暴露公网&lt;ul&gt;
&lt;li&gt;伪负载均衡&lt;/li&gt;
&lt;li&gt;登录鉴权可以被绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fee 承担业务多&lt;ul&gt;
&lt;li&gt;登录鉴权&lt;/li&gt;
&lt;li&gt;用户行为&lt;/li&gt;
&lt;li&gt;用户信息查询&lt;/li&gt;
&lt;li&gt;用户信息修改&lt;/li&gt;
&lt;li&gt;特殊活动&lt;/li&gt;
&lt;li&gt;交易信息&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fee 和 &lt;span class="caps"&gt;DB&lt;/span&gt; 的 Redis&amp;nbsp;缓存做的不够好&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>第一篇 github pages 文章</title><link href="http://lostsummer.github.io/posts/2016/Apr/28/201604282215.html" rel="alternate"></link><published>2016-04-28T00:00:00+08:00</published><updated>2016-04-28T00:00:00+08:00</updated><author><name>lostsummer</name></author><id>tag:lostsummer.github.io,2016-04-28:/posts/2016/Apr/28/201604282215.html</id><summary type="html"></summary><content type="html">&lt;p&gt;想利用 github blog 做一些技术知识的学习整理，一些技术文档的翻译等。关于用 github 写博客的好处，大家可以搜搜阮一峰的文章《搭建一个免费的，无限流量的Blog&amp;mdash;&amp;mdash;github&amp;nbsp;Pages和Jekyll入门》&lt;/p&gt;
&lt;p&gt;本博客搭建选用 pelican，因为我习惯用 Python。所以除了感谢 pelican 的作者以及 pelican&amp;nbsp;众多插件和主题的作者之外，还感谢以下两篇博文的作者，我是参照他们的教程搭好博客的：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.xycoding.com/articles/2013/11/21/blog-create/"&gt;xycoding: 使用Pelican和GitHub Pages搭建个人博客 &amp;mdash;&amp;mdash;&amp;nbsp;基础篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://x-wei.github.io/pelican_github_blog.html"&gt;mx:&amp;nbsp;用pelican在github上创建自己的博客!&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2017-04-26&amp;nbsp;update:&lt;/p&gt;
&lt;p&gt;今天更新一下这个&amp;nbsp;blog，发现距离它创建之初已经一年零两天，唏嘘一下。&lt;/p&gt;
&lt;p&gt;把少得可怜的三篇文章整理到 &lt;a href="http://wiki.lostsummer.love/"&gt;wiki&lt;/a&gt;&amp;nbsp;中，产出太少而时间太快，提醒自己要抓紧学习，重视整理。&lt;/p&gt;
&lt;p&gt;这个 wiki 也使用了一个 Python 生成工具，叫 &lt;a href="http://simiki.org/"&gt;simiki&lt;/a&gt;，是中国程序员 &lt;a href="https://github.com/tankywoo"&gt;tankywoo&lt;/a&gt;&amp;nbsp;写的，谢谢他，也希望能友更多的人用，我很喜欢它的简单。&lt;/p&gt;</content><category term="Python"></category><category term="Git"></category></entry></feed>