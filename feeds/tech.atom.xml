<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>LOST IN CODE - Tech</title><link href="http://lostsummer.github.io/" rel="alternate"></link><link href="http://lostsummer.github.io/feeds/tech.atom.xml" rel="self"></link><id>http://lostsummer.github.io/</id><updated>2018-03-30T00:00:00+08:00</updated><entry><title>我在Linux环境创建私有Go项目环境的方法</title><link href="http://lostsummer.github.io/201803301025.html" rel="alternate"></link><published>2018-03-30T00:00:00+08:00</published><updated>2018-03-30T00:00:00+08:00</updated><author><name>Yushin</name></author><id>tag:lostsummer.github.io,2018-03-30:/201803301025.html</id><summary type="html"></summary><content type="html">&lt;p&gt;初次开发构建Go项目的朋友可能对如果创建一个干净独立的项目环境有些疑惑，这里介绍一下个人经验。&lt;/p&gt;
&lt;h1&gt;前提&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;你安装配置好了golang编译器&lt;/li&gt;
&lt;li&gt;你懂得配置GOPATH，了解GO开发环境的目录结构&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;主要问题及解决手段概述&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;隔离的开发环境。通过覆盖GOPATH环境变量解决。&lt;/li&gt;
&lt;li&gt;三方依赖库的项目隔离。通过vendor机制。&lt;/li&gt;
&lt;li&gt;三方库版本依赖。通过govendor工具。&lt;/li&gt;
&lt;li&gt;golang.org/ 包不能直接go get的问题。通过github镜像解决。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;步骤&lt;/h1&gt;
&lt;h2&gt;工具安装&lt;/h2&gt;
&lt;p&gt;govendor&lt;/p&gt;
&lt;p&gt;具体使用方法见项目主页：https://github.com/kardianos/govendor&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;p&gt;go get -u github.com/kardianos/govendor&lt;/p&gt;
&lt;p&gt;该命令会将govender安装在你默认配置的的\$GOPATH/bin目录下，通常你已经将这个目录配置到了环境变量PATH中。&lt;/p&gt;
&lt;h2&gt;从一个实例开始&lt;/h2&gt;
&lt;p&gt;已有的所有项目地址：http://git.emoney.cn/monitor/monitorplat.git
代码包导入路径：MonitorPlat/oneagent, MonitorPlat/onedistribute, ... (该项目由多个程序组成)&lt;/p&gt;
&lt;h3&gt;创建目录结构&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p dev_projects/src/MonitorPlat
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;迁出代码&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd dev_projects
git clone http://git.emoney.cn/monitor/monitorplat.git src/MonitorPlat
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;环境隔离&lt;/h2&gt;
&lt;p&gt;为了和.bashrc中配置的\$GOPATH隔离，需要在dev_projects下运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$(pwd)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了使用方便，可以写两个脚本&lt;/p&gt;
&lt;p&gt;env_activate.sh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CURDIR=`pwd`
OLDGOPATH=&amp;quot;$GOPATH&amp;quot;
export GOPATH=&amp;quot;$CURDIR&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;env_deactivate.sh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$OLDGOPATH
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样你可以通过&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source env_activate.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source env_deactivate.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;来切换&lt;/p&gt;
&lt;h3&gt;vendor 初始化&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd src/MonitorPlat
govendor init
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;从github镜像获取golang.org依赖包&lt;/h3&gt;
&lt;p&gt;首先可以在Monitor目录下用命令看到项目所有依赖包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;govendor list

...
  m golang.org/x/net/context
  m golang.org/x/net/context/ctxhttp
  m golang.org/x/net/websocket
  m golang.org/x/text/cases
  m golang.org/x/text/encoding
  m golang.org/x/text/encoding/charmap
  m golang.org/x/text/encoding/internal
  m golang.org/x/text/encoding/internal/enctest
  m golang.org/x/text/encoding/internal/identifier
  m golang.org/x/text/encoding/simplifiedchinese
  m golang.org/x/text/encoding/unicode
  m golang.org/x/text/internal
  m golang.org/x/text/internal/gen
  m golang.org/x/text/internal/language
  m golang.org/x/text/internal/language/compact
  m golang.org/x/text/internal/tag
  m golang.org/x/text/internal/testtext
  m golang.org/x/text/internal/ucd
  m golang.org/x/text/internal/utf8internal
  m golang.org/x/text/language
  m golang.org/x/text/runes
  m golang.org/x/text/transform
  m golang.org/x/text/unicode/cldr
  m golang.org/x/text/unicode/norm
  m golang.org/x/text/unicode/rangetable
  m golang.org/x/text/width
  m github.com/devfeel/dottask
  m github.com/devfeel/dotweb
  m github.com/devfeel/dotweb/cache
  m github.com/devfeel/dotweb/cache/redis
  m github.com/devfeel/dotweb/cache/runtime
  m github.com/devfeel/dotweb/config
  m github.com/devfeel/dotweb/const
  m github.com/devfeel/dotweb/core
  m github.com/devfeel/dotweb/feature
  m github.com/devfeel/dotweb/framework/convert
  m github.com/devfeel/dotweb/framework/crypto
  m github.com/devfeel/dotweb/framework/crypto/uuid
  m github.com/devfeel/dotweb/framework/encodes/gob
  m github.com/devfeel/dotweb/framework/exception
  m github.com/devfeel/dotweb/framework/file
  m github.com/devfeel/dotweb/framework/json
  m github.com/devfeel/dotweb/framework/redis
  m github.com/devfeel/dotweb/framework/reflects
  m github.com/devfeel/dotweb/logger
  m github.com/devfeel/dotweb/servers
  m github.com/devfeel/dotweb/session
  m github.com/devfeel/dotweb/test
  m github.com/garyburd/redigo/internal
  m github.com/garyburd/redigo/redis
  m github.com/influxdata/influxdb/client/v2
  m github.com/influxdata/influxdb/models
  m github.com/influxdata/influxdb/pkg/escape
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中行首 m 标识的，是目前环境缺少的包。从 golang.org 的依赖主要是 x/net 和 x/text 两部分。&lt;/p&gt;
&lt;p&gt;vendor 目录中创建 golang.org/x 目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p vendor/golang.org/x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;项目子模块添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule add https://github.com/golang/net.git vendor/golang.org/x/net
git submodule add https://github.com/golang/text.git vendor/golang.org/x/text
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;获取其他依赖包&lt;/h3&gt;
&lt;p&gt;可以简单的通过一个命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;govendor fetch +m
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;git 追踪&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add vendor/vendor.json
git commit ...
git push ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;新位置使用&lt;/h3&gt;
&lt;p&gt;git submodule 已经把vendor/golang.org 下的项目版本记住
其他的包，vendor.json 记录了版本。&lt;/p&gt;
&lt;p&gt;commit 并提交到远程库后，在新的位置迁出后&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$(pwd)
cd src/MonitorPlat
git submodule update
govender sync
&lt;/pre&gt;&lt;/div&gt;</content><category term="Go Linux"></category></entry></feed>