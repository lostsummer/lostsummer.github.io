<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>$ kill -1 - Learning</title><link href="http://lostsummer.github.io/" rel="alternate"></link><link href="http://lostsummer.github.io/feeds/learning.atom.xml" rel="self"></link><id>http://lostsummer.github.io/</id><updated>2018-04-09T00:00:00+08:00</updated><entry><title>容器监控方案选型</title><link href="http://lostsummer.github.io/posts/2018/Apr/09/201804091040.html" rel="alternate"></link><published>2018-04-09T00:00:00+08:00</published><updated>2018-04-09T00:00:00+08:00</updated><author><name>Yushin</name></author><id>tag:lostsummer.github.io,2018-04-09:/posts/2018/Apr/09/201804091040.html</id><summary type="html">&lt;p&gt;根据一篇不错的文章: &amp;#8221; &lt;a href="https://mp.weixin.qq.com/s?__biz=MzA5OTAyNzQ2OA==&amp;amp;mid=2649696965&amp;amp;idx=1&amp;amp;sn=acdbaf74f837d6e07d753bc4e3199206&amp;amp;chksm=889315a6bfe49cb04686cd6d7a19ec73fdc7ddec98387d4ba5e524616669ee13f2f5b277a673&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0225cAhRGuYUIQ4Qidt6eXFU#rd"&gt;容器领域的十大监控系统对比 &lt;/a&gt; &amp;#8221;&amp;nbsp;列出的流行监控方案&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;方案&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;DOCKER&lt;/span&gt; &lt;span class="caps"&gt;STATS&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;原生命令行工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CADVISOR&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;通常作为信息采集组件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SCOUT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;PINGDOM&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;DATADOG&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SYSDIG&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;PROMETHEUS&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;数据收集、告警&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;HEAPSTER&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Kuberenets only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ELK&lt;/span&gt; &lt;span class="caps"&gt;STACK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;日志分析，监控的一环&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SENSU&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;没有容器化，部署麻烦，免费版功能不强&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;更加确定了我们目前试用的以Prometheus为核心的方案。筛选的过程很简单，撇除掉商业付费的方案，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker stats&amp;nbsp;只是一个命令行接口，称不上方案，可能会被其他采集工具调用 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;根据一篇不错的文章: &amp;#8221; &lt;a href="https://mp.weixin.qq.com/s?__biz=MzA5OTAyNzQ2OA==&amp;amp;mid=2649696965&amp;amp;idx=1&amp;amp;sn=acdbaf74f837d6e07d753bc4e3199206&amp;amp;chksm=889315a6bfe49cb04686cd6d7a19ec73fdc7ddec98387d4ba5e524616669ee13f2f5b277a673&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0225cAhRGuYUIQ4Qidt6eXFU#rd"&gt;容器领域的十大监控系统对比 &lt;/a&gt; &amp;#8221;&amp;nbsp;列出的流行监控方案&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;方案&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;DOCKER&lt;/span&gt; &lt;span class="caps"&gt;STATS&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;原生命令行工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CADVISOR&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;通常作为信息采集组件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SCOUT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;PINGDOM&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;DATADOG&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SYSDIG&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;付费云服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;PROMETHEUS&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;数据收集、告警&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;HEAPSTER&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Kuberenets only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ELK&lt;/span&gt; &lt;span class="caps"&gt;STACK&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;日志分析，监控的一环&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SENSU&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;没有容器化，部署麻烦，免费版功能不强&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;更加确定了我们目前试用的以Prometheus为核心的方案。筛选的过程很简单，撇除掉商业付费的方案，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker stats&amp;nbsp;只是一个命令行接口，称不上方案，可能会被其他采集工具调用&lt;/li&gt;
&lt;li&gt;CAdvisor&amp;nbsp;目前我们作为数据采集的重要组件&lt;/li&gt;
&lt;li&gt;Prometheus&amp;nbsp;目前监控方案的核心&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ELK&lt;/span&gt;&amp;nbsp;目前还没用起来，可作为Granfana数据源，分析日志触发面板上的预警&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前试用的方案来源于github上的一份参考 &lt;a href="https://github.com/bvis/docker-prometheus-swarm"&gt;bvis/docker-prometheus-swarm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从他的容器编排可以看到整体方案是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采集器&lt;/li&gt;
&lt;li&gt;CAdvisor&lt;/li&gt;
&lt;li&gt;Node exporter (promethues&amp;nbsp;组件一部分)&lt;/li&gt;
&lt;li&gt;docker exporter&amp;nbsp;(转发容器原生API信息)&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;Prometheus&lt;/li&gt;
&lt;li&gt;报警器&lt;/li&gt;
&lt;li&gt;to slack&amp;nbsp;(国内用不了)&lt;/li&gt;
&lt;li&gt;to logstash&amp;nbsp;（没用起来）&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ELK&lt;/span&gt;&amp;nbsp;（没用起来）&lt;/li&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;li&gt;logstash&lt;/li&gt;
&lt;li&gt;kibana&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后结合一个Granfana模板的呈现就是这里 &lt;a href="http://grafana.emoney.cn/dashboard/db/docker-swarm-and-container-overview?refresh=1m&amp;amp;orgId=2&amp;amp;var-node=All&amp;amp;var-instance=10.0.0.12:9100&amp;amp;var-instance=10.0.0.13:9100&amp;amp;var-instance=10.0.0.15:9100&amp;amp;var-instance=10.0.0.14:9100&amp;amp;var-stack_namespace=All&amp;amp;var-service_name=All&amp;amp;var-proxy=All&amp;amp;var-topk=20&amp;amp;var-interval=$__auto_interval"&gt;docker-swarm-and-container-overview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中顶部 Errors，Alert Fired， Alert&amp;nbsp;Resolved是要配置Elasticsearch数据源使用的，目前还没有。&lt;/p&gt;
&lt;p&gt;数据库曾经试过我们熟悉的InfluxDB，配合CAdvisor做数据采集使用，但是发现Prometheus的指标查询更有可定制性和弹性。使用InfluxDB时一旦容器变动，需要频繁手动调整Granfana中的查询语句。这样的问题在Prometheus中不是问题。只是Prometheus的查询语言PromQL比InfluxQL略复杂。&lt;/p&gt;
&lt;p&gt;文中很多部分提到 Rancher 通过插件等方式整合CAdvisor， Promethues  等组件。Rancher&amp;nbsp;是否适合Swarm集群，整合的方式是否好用，还需要研究Rancher后再看。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;update:&amp;nbsp;2018-04-10&lt;/p&gt;
&lt;p&gt;Rancher 的调研写在Wiki里：&lt;a href="http://wiki.lostsummer.love/Docker/rancher%E5%BA%94%E7%94%A8%E4%BA%8Eswarm%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E7%9A%84%E8%B0%83%E7%A0%94.html"&gt;Rancher应用于swarm集群管理的调研&lt;/a&gt;&lt;/p&gt;</content><category term="Docker"></category><category term="Prometheus"></category><category term="InfluxDB"></category></entry><entry><title>我在Linux环境创建私有Go项目环境的方法</title><link href="http://lostsummer.github.io/posts/2018/Mar/30/201803301025.html" rel="alternate"></link><published>2018-03-30T00:00:00+08:00</published><updated>2018-03-30T00:00:00+08:00</updated><author><name>Yushin</name></author><id>tag:lostsummer.github.io,2018-03-30:/posts/2018/Mar/30/201803301025.html</id><summary type="html">
&lt;p&gt;初次开发构建Go项目的朋友可能对如果创建一个干净独立的项目环境有些疑惑，这里介绍一下个人经验。&lt;/p&gt;
&lt;h1 id="_1"&gt;&lt;a class="toclink" href="#_1"&gt;前提&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;你安装配置好了golang编译器&lt;/li&gt;
&lt;li&gt;你懂得配置GOPATH，了解GO开发环境的目录结构&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_2"&gt;&lt;a class="toclink" href="#_2"&gt;主要问题及解决手段概述&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;隔离的开发环境。通过覆盖GOPATH环境变量解决。&lt;/li&gt;
&lt;li&gt;三方依赖库的项目隔离。通过vendor机制。&lt;/li&gt;
&lt;li&gt;三方库版本依赖。通过govendor工具。&lt;/li&gt;
&lt;li&gt;golang.org/ 包不能直接go get的问题。通过github镜像解决。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_3"&gt;&lt;a class="toclink" href="#_3"&gt;步骤&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_4"&gt;&lt;a class="toclink" href="#_4"&gt;工具安装&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;govendor&lt;/p&gt;
&lt;p&gt;具体使用方法见项目主页：https://github.com/kardianos/govendor&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;p&gt;go get -u github.com/kardianos/govendor&lt;/p&gt;
&lt;p&gt;该命令会将govender安装在你默认配置的的\$&lt;span class="caps"&gt;GOPATH&lt;/span&gt;/bin目录下，通常你已经将这个目录配置到了环境变量PATH中。&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;a class="toclink" href="#_5"&gt;从一个实例开始&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;已有的所有项目地址：http://git.emoney.cn/monitor/monitorplat.git
代码包导入路径：MonitorPlat …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;初次开发构建Go项目的朋友可能对如果创建一个干净独立的项目环境有些疑惑，这里介绍一下个人经验。&lt;/p&gt;
&lt;h1 id="_1"&gt;&lt;a class="toclink" href="#_1"&gt;前提&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;你安装配置好了golang编译器&lt;/li&gt;
&lt;li&gt;你懂得配置GOPATH，了解GO开发环境的目录结构&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_2"&gt;&lt;a class="toclink" href="#_2"&gt;主要问题及解决手段概述&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;隔离的开发环境。通过覆盖GOPATH环境变量解决。&lt;/li&gt;
&lt;li&gt;三方依赖库的项目隔离。通过vendor机制。&lt;/li&gt;
&lt;li&gt;三方库版本依赖。通过govendor工具。&lt;/li&gt;
&lt;li&gt;golang.org/ 包不能直接go get的问题。通过github镜像解决。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_3"&gt;&lt;a class="toclink" href="#_3"&gt;步骤&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_4"&gt;&lt;a class="toclink" href="#_4"&gt;工具安装&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;govendor&lt;/p&gt;
&lt;p&gt;具体使用方法见项目主页：https://github.com/kardianos/govendor&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;p&gt;go get -u github.com/kardianos/govendor&lt;/p&gt;
&lt;p&gt;该命令会将govender安装在你默认配置的的\$&lt;span class="caps"&gt;GOPATH&lt;/span&gt;/bin目录下，通常你已经将这个目录配置到了环境变量PATH中。&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;a class="toclink" href="#_5"&gt;从一个实例开始&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;已有的所有项目地址：http://git.emoney.cn/monitor/monitorplat.git
代码包导入路径：MonitorPlat/oneagent, MonitorPlat/onedistribute, … (该项目由多个程序组成)&lt;/p&gt;
&lt;h3 id="_6"&gt;&lt;a class="toclink" href="#_6"&gt;创建目录结构&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p dev_projects/src/MonitorPlat
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_7"&gt;&lt;a class="toclink" href="#_7"&gt;迁出代码&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd dev_projects
git clone http://git.emoney.cn/monitor/monitorplat.git src/MonitorPlat
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_8"&gt;&lt;a class="toclink" href="#_8"&gt;环境隔离&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了和.bashrc中配置的\$GOPATH隔离，需要在dev_projects下运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$(pwd)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了使用方便，可以写两个脚本&lt;/p&gt;
&lt;p&gt;env_activate.sh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CURDIR=`pwd`
OLDGOPATH="$GOPATH"
export GOPATH="$CURDIR"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;env_deactivate.sh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$OLDGOPATH
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样你可以通过&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source env_activate.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source env_deactivate.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来切换&lt;/p&gt;
&lt;h3 id="vendor"&gt;&lt;a class="toclink" href="#vendor"&gt;vendor 初始化&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd src/MonitorPlat
govendor init
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="githubgolangorg"&gt;&lt;a class="toclink" href="#githubgolangorg"&gt;从github镜像获取golang.org依赖包&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先可以在Monitor目录下用命令看到项目所有依赖包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;govendor list

...
  m golang.org/x/net/context
  m golang.org/x/net/context/ctxhttp
  m golang.org/x/net/websocket
  m golang.org/x/text/cases
  m golang.org/x/text/encoding
  m golang.org/x/text/encoding/charmap
  m golang.org/x/text/encoding/internal
  m golang.org/x/text/encoding/internal/enctest
  m golang.org/x/text/encoding/internal/identifier
  m golang.org/x/text/encoding/simplifiedchinese
  m golang.org/x/text/encoding/unicode
  m golang.org/x/text/internal
  m golang.org/x/text/internal/gen
  m golang.org/x/text/internal/language
  m golang.org/x/text/internal/language/compact
  m golang.org/x/text/internal/tag
  m golang.org/x/text/internal/testtext
  m golang.org/x/text/internal/ucd
  m golang.org/x/text/internal/utf8internal
  m golang.org/x/text/language
  m golang.org/x/text/runes
  m golang.org/x/text/transform
  m golang.org/x/text/unicode/cldr
  m golang.org/x/text/unicode/norm
  m golang.org/x/text/unicode/rangetable
  m golang.org/x/text/width
  m github.com/devfeel/dottask
  m github.com/devfeel/dotweb
  m github.com/devfeel/dotweb/cache
  m github.com/devfeel/dotweb/cache/redis
  m github.com/devfeel/dotweb/cache/runtime
  m github.com/devfeel/dotweb/config
  m github.com/devfeel/dotweb/const
  m github.com/devfeel/dotweb/core
  m github.com/devfeel/dotweb/feature
  m github.com/devfeel/dotweb/framework/convert
  m github.com/devfeel/dotweb/framework/crypto
  m github.com/devfeel/dotweb/framework/crypto/uuid
  m github.com/devfeel/dotweb/framework/encodes/gob
  m github.com/devfeel/dotweb/framework/exception
  m github.com/devfeel/dotweb/framework/file
  m github.com/devfeel/dotweb/framework/json
  m github.com/devfeel/dotweb/framework/redis
  m github.com/devfeel/dotweb/framework/reflects
  m github.com/devfeel/dotweb/logger
  m github.com/devfeel/dotweb/servers
  m github.com/devfeel/dotweb/session
  m github.com/devfeel/dotweb/test
  m github.com/garyburd/redigo/internal
  m github.com/garyburd/redigo/redis
  m github.com/influxdata/influxdb/client/v2
  m github.com/influxdata/influxdb/models
  m github.com/influxdata/influxdb/pkg/escape
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中行首 m 标识的，是目前环境缺少的包。从 golang.org 的依赖主要是 x/net 和 x/text 两部分。&lt;/p&gt;
&lt;p&gt;vendor 目录中创建 golang.org/x 目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p vendor/golang.org/x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;项目子模块添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule add https://github.com/golang/net.git vendor/golang.org/x/net
git submodule add https://github.com/golang/text.git vendor/golang.org/x/text
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_9"&gt;&lt;a class="toclink" href="#_9"&gt;获取其他依赖包&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以简单的通过一个命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;govendor fetch +m
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="git"&gt;&lt;a class="toclink" href="#git"&gt;git 追踪&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add vendor/vendor.json
git commit ...
git push ...
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_10"&gt;&lt;a class="toclink" href="#_10"&gt;新位置使用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;git submodule 已经把vendor/golang.org 下的项目版本记住
其他的包，vendor.json 记录了版本。&lt;/p&gt;
&lt;p&gt;commit 并提交到远程库后，在新的位置迁出后&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$(pwd)
cd src/MonitorPlat
git submodule update
govender sync
&lt;/pre&gt;&lt;/div&gt;</content><category term="Go"></category><category term="Linux"></category></entry></feed>